#include<unordered_map>
 #include<queue>
 #include<set>
#include <list>
bool iscyclic(int src,unordered_map<int, bool> &visited, unordered_map<int, list<int>> &adjlist)
{
    unordered_map<int,int> parent;
    parent[src]=-1;
    visited[src]=1;
    queue<int> q;
    q.push(src);
  
    while(!q.empty())
    {
        int frontnode= q.front();
        q.pop();
        
        // traverse all neighbours of frontnode
        for(auto i: adjlist[frontnode])
        {
        ///1->2,3
        ///2->1
        
        // here we undirected graph so we can traverse both node each side so if the 1 is parent of 2 so it required that 2 is also a prent of 1 . if it not then we         //simple graph have some loop at that node
            if(visited[i]==true && parent[frontnode]!=i)
            {
                return true;
            }
            else
                if(!visited[i])
            {
                q.push(i);
                visited[i]=1;
                parent[i]=frontnode;
            }
        }
    }
    return false;
} 

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int, list<int>> adjlist;

    // create adjcnet list

    unordered_map<int, bool> visited;
    for(int i=0; i<edges.size(); i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];
        
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }
    
      for(int i=0; i<n; i++)
    {
        if(!visited[i])
        {
          bool ans = iscyclic(i, visited, adjlist);
          if(ans == 1)
              return "Yes";
        }
    }
    return "No";
}
