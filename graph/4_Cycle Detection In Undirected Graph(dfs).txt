 #include<unordered_map>
 #include<queue>
 #include<set>
#include <list>

bool iscyclicdfs (int node,int parent,unordered_map<int, bool> &visited, unordered_map<int, list<int>> &adjlist)
{
    visited[node]=true;
    for(auto neighbour: adjlist[node])
    {
        if(!visited[neighbour])
        {
            bool cycledetected=iscyclicdfs(neighbour, node, visited, adjlist);
            if(cycledetected)
                return true;
        }
        else
            if(neighbour != parent)
        {
            return true;
        }  
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int, list<int>> adjlist;

    // create adjcnet list

    unordered_map<int, bool> visited;
    for(int i=0; i<edges.size(); i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];
        
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }
    
    for(int i=0; i<n; i++)
    {
        if(!visited[i])
        {
          bool ans = iscyclicdfs(i, -1,visited, adjlist);
          if(ans == 1)
              return "Yes";
        }
    }
    return "No";
}
